//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PassiveClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IActiveShell")]
    public interface IActiveShell {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShellPassiveshell/IsTransferingData", ReplyAction="http://tempuri.org/IActiveShellPassiveshell/IsTransferingDataResponse")]
        bool IsTransferingData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShellPassiveshell/IsTransferingData", ReplyAction="http://tempuri.org/IActiveShellPassiveshell/IsTransferingDataResponse")]
        System.Threading.Tasks.Task<bool> IsTransferingDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShellPassiveshell/StartTransferData", ReplyAction="http://tempuri.org/IActiveShellPassiveshell/StartTransferDataResponse")]
        void StartTransferData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShellPassiveshell/StartTransferData", ReplyAction="http://tempuri.org/IActiveShellPassiveshell/StartTransferDataResponse")]
        System.Threading.Tasks.Task StartTransferDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ActiveNextCommand", ReplyAction="http://tempuri.org/IActiveShell/ActiveNextCommandResponse")]
        string ActiveNextCommand(string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ActiveNextCommand", ReplyAction="http://tempuri.org/IActiveShell/ActiveNextCommandResponse")]
        System.Threading.Tasks.Task<string> ActiveNextCommandAsync(string command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ActiveClientRun", ReplyAction="http://tempuri.org/IActiveShell/ActiveClientRunResponse")]
        string ActiveClientRun();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ActiveClientRun", ReplyAction="http://tempuri.org/IActiveShell/ActiveClientRunResponse")]
        System.Threading.Tasks.Task<string> ActiveClientRunAsync();
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (ActiveDownloadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ActiveDownloadFile", ReplyAction="http://tempuri.org/IActiveShell/ActiveDownloadFileResponse")]
        PassiveClient.ServiceReference1.RemoteFileInfo ActiveDownloadFile(PassiveClient.ServiceReference1.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ActiveDownloadFile", ReplyAction="http://tempuri.org/IActiveShell/ActiveDownloadFileResponse")]
        System.Threading.Tasks.Task<PassiveClient.ServiceReference1.RemoteFileInfo> ActiveDownloadFileAsync(PassiveClient.ServiceReference1.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ActiveUploadFile", ReplyAction="http://tempuri.org/IActiveShell/ActiveUploadFileResponse")]
        PassiveClient.ServiceReference1.RemoteFileInfo ActiveUploadFile(PassiveClient.ServiceReference1.RemoteFileInfo request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ActiveUploadFile", ReplyAction="http://tempuri.org/IActiveShell/ActiveUploadFileResponse")]
        System.Threading.Tasks.Task<PassiveClient.ServiceReference1.RemoteFileInfo> ActiveUploadFileAsync(PassiveClient.ServiceReference1.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ClearQueue", ReplyAction="http://tempuri.org/IActiveShell/ClearQueueResponse")]
        void ClearQueue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ClearQueue", ReplyAction="http://tempuri.org/IActiveShell/ClearQueueResponse")]
        System.Threading.Tasks.Task ClearQueueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/GetStatus", ReplyAction="http://tempuri.org/IActiveShell/GetStatusResponse")]
        string GetStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/GetStatus", ReplyAction="http://tempuri.org/IActiveShell/GetStatusResponse")]
        System.Threading.Tasks.Task<string> GetStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/SelectClient", ReplyAction="http://tempuri.org/IActiveShell/SelectClientResponse")]
        bool SelectClient(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/SelectClient", ReplyAction="http://tempuri.org/IActiveShell/SelectClientResponse")]
        System.Threading.Tasks.Task<bool> SelectClientAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ActiveCloseClient", ReplyAction="http://tempuri.org/IActiveShell/ActiveCloseClientResponse")]
        bool ActiveCloseClient(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ActiveCloseClient", ReplyAction="http://tempuri.org/IActiveShell/ActiveCloseClientResponse")]
        System.Threading.Tasks.Task<bool> ActiveCloseClientAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ClearAllData", ReplyAction="http://tempuri.org/IActiveShell/ClearAllDataResponse")]
        bool ClearAllData(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ClearAllData", ReplyAction="http://tempuri.org/IActiveShell/ClearAllDataResponse")]
        System.Threading.Tasks.Task<bool> ClearAllDataAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/DeleteClientTask", ReplyAction="http://tempuri.org/IActiveShell/DeleteClientTaskResponse")]
        bool DeleteClientTask(string id, bool shellTask, int taksNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/DeleteClientTask", ReplyAction="http://tempuri.org/IActiveShell/DeleteClientTaskResponse")]
        System.Threading.Tasks.Task<bool> DeleteClientTaskAsync(string id, bool shellTask, int taksNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ActiveSetNickName", ReplyAction="http://tempuri.org/IActiveShell/ActiveSetNickNameResponse")]
        bool ActiveSetNickName(string id, string nickName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShell/ActiveSetNickName", ReplyAction="http://tempuri.org/IActiveShell/ActiveSetNickNameResponse")]
        System.Threading.Tasks.Task<bool> ActiveSetNickNameAsync(string id, string nickName);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool NewStart;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string PathInServer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string PathToSaveInClient;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string taskId;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(string FileName, bool NewStart, string PathInServer, string PathToSaveInClient, string id, string taskId) {
            this.FileName = FileName;
            this.NewStart = NewStart;
            this.PathInServer = PathInServer;
            this.PathToSaveInClient = PathToSaveInClient;
            this.id = id;
            this.taskId = taskId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool FileEnded;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileSize;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool FreshStart;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string PathToSaveOnServer;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string id;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string taskId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public byte[] FileByteStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(bool FileEnded, string FileName, string FileSize, bool FreshStart, long Length, string PathToSaveOnServer, string id, string taskId, byte[] FileByteStream) {
            this.FileEnded = FileEnded;
            this.FileName = FileName;
            this.FileSize = FileSize;
            this.FreshStart = FreshStart;
            this.Length = Length;
            this.PathToSaveOnServer = PathToSaveOnServer;
            this.id = id;
            this.taskId = taskId;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IActiveShellChannel : PassiveClient.ServiceReference1.IActiveShell, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ActiveShellClient : System.ServiceModel.ClientBase<PassiveClient.ServiceReference1.IActiveShell>, PassiveClient.ServiceReference1.IActiveShell {
        
        public ActiveShellClient() {
        }
        
        public ActiveShellClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ActiveShellClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActiveShellClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ActiveShellClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsTransferingData() {
            return base.Channel.IsTransferingData();
        }
        
        public System.Threading.Tasks.Task<bool> IsTransferingDataAsync() {
            return base.Channel.IsTransferingDataAsync();
        }
        
        public void StartTransferData() {
            base.Channel.StartTransferData();
        }
        
        public System.Threading.Tasks.Task StartTransferDataAsync() {
            return base.Channel.StartTransferDataAsync();
        }
        
        public string ActiveNextCommand(string command) {
            return base.Channel.ActiveNextCommand(command);
        }
        
        public System.Threading.Tasks.Task<string> ActiveNextCommandAsync(string command) {
            return base.Channel.ActiveNextCommandAsync(command);
        }
        
        public string ActiveClientRun() {
            return base.Channel.ActiveClientRun();
        }
        
        public System.Threading.Tasks.Task<string> ActiveClientRunAsync() {
            return base.Channel.ActiveClientRunAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PassiveClient.ServiceReference1.RemoteFileInfo PassiveClient.ServiceReference1.IActiveShell.ActiveDownloadFile(PassiveClient.ServiceReference1.DownloadRequest request) {
            return base.Channel.ActiveDownloadFile(request);
        }
        
        public bool ActiveDownloadFile(ref string FileName, bool NewStart, string PathInServer, string PathToSaveInClient, ref string id, ref string taskId, out string FileSize, out bool FreshStart, out long Length, out string PathToSaveOnServer, out byte[] FileByteStream) {
            PassiveClient.ServiceReference1.DownloadRequest inValue = new PassiveClient.ServiceReference1.DownloadRequest();
            inValue.FileName = FileName;
            inValue.NewStart = NewStart;
            inValue.PathInServer = PathInServer;
            inValue.PathToSaveInClient = PathToSaveInClient;
            inValue.id = id;
            inValue.taskId = taskId;
            PassiveClient.ServiceReference1.RemoteFileInfo retVal = ((PassiveClient.ServiceReference1.IActiveShell)(this)).ActiveDownloadFile(inValue);
            FileName = retVal.FileName;
            FileSize = retVal.FileSize;
            FreshStart = retVal.FreshStart;
            Length = retVal.Length;
            PathToSaveOnServer = retVal.PathToSaveOnServer;
            id = retVal.id;
            taskId = retVal.taskId;
            FileByteStream = retVal.FileByteStream;
            return retVal.FileEnded;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<PassiveClient.ServiceReference1.RemoteFileInfo> PassiveClient.ServiceReference1.IActiveShell.ActiveDownloadFileAsync(PassiveClient.ServiceReference1.DownloadRequest request) {
            return base.Channel.ActiveDownloadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<PassiveClient.ServiceReference1.RemoteFileInfo> ActiveDownloadFileAsync(string FileName, bool NewStart, string PathInServer, string PathToSaveInClient, string id, string taskId) {
            PassiveClient.ServiceReference1.DownloadRequest inValue = new PassiveClient.ServiceReference1.DownloadRequest();
            inValue.FileName = FileName;
            inValue.NewStart = NewStart;
            inValue.PathInServer = PathInServer;
            inValue.PathToSaveInClient = PathToSaveInClient;
            inValue.id = id;
            inValue.taskId = taskId;
            return ((PassiveClient.ServiceReference1.IActiveShell)(this)).ActiveDownloadFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PassiveClient.ServiceReference1.RemoteFileInfo PassiveClient.ServiceReference1.IActiveShell.ActiveUploadFile(PassiveClient.ServiceReference1.RemoteFileInfo request) {
            return base.Channel.ActiveUploadFile(request);
        }
        
        public void ActiveUploadFile(ref bool FileEnded, ref string FileName, ref string FileSize, ref bool FreshStart, ref long Length, ref string PathToSaveOnServer, ref string id, ref string taskId, ref byte[] FileByteStream) {
            PassiveClient.ServiceReference1.RemoteFileInfo inValue = new PassiveClient.ServiceReference1.RemoteFileInfo();
            inValue.FileEnded = FileEnded;
            inValue.FileName = FileName;
            inValue.FileSize = FileSize;
            inValue.FreshStart = FreshStart;
            inValue.Length = Length;
            inValue.PathToSaveOnServer = PathToSaveOnServer;
            inValue.id = id;
            inValue.taskId = taskId;
            inValue.FileByteStream = FileByteStream;
            PassiveClient.ServiceReference1.RemoteFileInfo retVal = ((PassiveClient.ServiceReference1.IActiveShell)(this)).ActiveUploadFile(inValue);
            FileEnded = retVal.FileEnded;
            FileName = retVal.FileName;
            FileSize = retVal.FileSize;
            FreshStart = retVal.FreshStart;
            Length = retVal.Length;
            PathToSaveOnServer = retVal.PathToSaveOnServer;
            id = retVal.id;
            taskId = retVal.taskId;
            FileByteStream = retVal.FileByteStream;
        }
        
        public System.Threading.Tasks.Task<PassiveClient.ServiceReference1.RemoteFileInfo> ActiveUploadFileAsync(PassiveClient.ServiceReference1.RemoteFileInfo request) {
            return base.Channel.ActiveUploadFileAsync(request);
        }
        
        public void ClearQueue() {
            base.Channel.ClearQueue();
        }
        
        public System.Threading.Tasks.Task ClearQueueAsync() {
            return base.Channel.ClearQueueAsync();
        }
        
        public string GetStatus() {
            return base.Channel.GetStatus();
        }
        
        public System.Threading.Tasks.Task<string> GetStatusAsync() {
            return base.Channel.GetStatusAsync();
        }
        
        public bool SelectClient(string id) {
            return base.Channel.SelectClient(id);
        }
        
        public System.Threading.Tasks.Task<bool> SelectClientAsync(string id) {
            return base.Channel.SelectClientAsync(id);
        }
        
        public bool ActiveCloseClient(string id) {
            return base.Channel.ActiveCloseClient(id);
        }
        
        public System.Threading.Tasks.Task<bool> ActiveCloseClientAsync(string id) {
            return base.Channel.ActiveCloseClientAsync(id);
        }
        
        public bool ClearAllData(string id) {
            return base.Channel.ClearAllData(id);
        }
        
        public System.Threading.Tasks.Task<bool> ClearAllDataAsync(string id) {
            return base.Channel.ClearAllDataAsync(id);
        }
        
        public bool DeleteClientTask(string id, bool shellTask, int taksNumber) {
            return base.Channel.DeleteClientTask(id, shellTask, taksNumber);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClientTaskAsync(string id, bool shellTask, int taksNumber) {
            return base.Channel.DeleteClientTaskAsync(id, shellTask, taksNumber);
        }
        
        public bool ActiveSetNickName(string id, string nickName) {
            return base.Channel.ActiveSetNickName(id, nickName);
        }
        
        public System.Threading.Tasks.Task<bool> ActiveSetNickNameAsync(string id, string nickName) {
            return base.Channel.ActiveSetNickNameAsync(id, nickName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IPassiveShell")]
    public interface IPassiveShell {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShellPassiveshell/IsTransferingData", ReplyAction="http://tempuri.org/IActiveShellPassiveshell/IsTransferingDataResponse")]
        bool IsTransferingData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShellPassiveshell/IsTransferingData", ReplyAction="http://tempuri.org/IActiveShellPassiveshell/IsTransferingDataResponse")]
        System.Threading.Tasks.Task<bool> IsTransferingDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShellPassiveshell/StartTransferData", ReplyAction="http://tempuri.org/IActiveShellPassiveshell/StartTransferDataResponse")]
        void StartTransferData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveShellPassiveshell/StartTransferData", ReplyAction="http://tempuri.org/IActiveShellPassiveshell/StartTransferDataResponse")]
        System.Threading.Tasks.Task StartTransferDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/PassiveClientRun", ReplyAction="http://tempuri.org/IPassiveShell/PassiveClientRunResponse")]
        bool PassiveClientRun(string id, string taskId, string baseLine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/PassiveClientRun", ReplyAction="http://tempuri.org/IPassiveShell/PassiveClientRunResponse")]
        System.Threading.Tasks.Task<bool> PassiveClientRunAsync(string id, string taskId, string baseLine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/PassiveNextCommand", ReplyAction="http://tempuri.org/IPassiveShell/PassiveNextCommandResponse")]
        System.Tuple<string, string, string> PassiveNextCommand(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/PassiveNextCommand", ReplyAction="http://tempuri.org/IPassiveShell/PassiveNextCommandResponse")]
        System.Threading.Tasks.Task<System.Tuple<string, string, string>> PassiveNextCommandAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/CommandResponse", ReplyAction="http://tempuri.org/IPassiveShell/CommandResponseResponse")]
        void CommandResponse(string id, string taskId, string baseLine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/CommandResponse", ReplyAction="http://tempuri.org/IPassiveShell/CommandResponseResponse")]
        System.Threading.Tasks.Task CommandResponseAsync(string id, string taskId, string baseLine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/HasCommand", ReplyAction="http://tempuri.org/IPassiveShell/HasCommandResponse")]
        bool HasCommand(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/HasCommand", ReplyAction="http://tempuri.org/IPassiveShell/HasCommandResponse")]
        System.Threading.Tasks.Task<bool> HasCommandAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/HasUploadCommand", ReplyAction="http://tempuri.org/IPassiveShell/HasUploadCommandResponse")]
        bool HasUploadCommand(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/HasUploadCommand", ReplyAction="http://tempuri.org/IPassiveShell/HasUploadCommandResponse")]
        System.Threading.Tasks.Task<bool> HasUploadCommandAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/HasDownloadCommand", ReplyAction="http://tempuri.org/IPassiveShell/HasDownloadCommandResponse")]
        bool HasDownloadCommand(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/HasDownloadCommand", ReplyAction="http://tempuri.org/IPassiveShell/HasDownloadCommandResponse")]
        System.Threading.Tasks.Task<bool> HasDownloadCommandAsync(string id);
        
        // CODEGEN: Generating message contract since the operation PassiveDownloadedFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/PassiveDownloadedFile", ReplyAction="http://tempuri.org/IPassiveShell/PassiveDownloadedFileResponse")]
        PassiveClient.ServiceReference1.PassiveDownloadedFileResponse PassiveDownloadedFile(PassiveClient.ServiceReference1.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/PassiveDownloadedFile", ReplyAction="http://tempuri.org/IPassiveShell/PassiveDownloadedFileResponse")]
        System.Threading.Tasks.Task<PassiveClient.ServiceReference1.PassiveDownloadedFileResponse> PassiveDownloadedFileAsync(PassiveClient.ServiceReference1.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/PassiveGetDownloadFile", ReplyAction="http://tempuri.org/IPassiveShell/PassiveGetDownloadFileResponse")]
        PassiveClient.ServiceReference1.DownloadRequest PassiveGetDownloadFile(PassiveClient.ServiceReference1.DownloadRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/PassiveGetDownloadFile", ReplyAction="http://tempuri.org/IPassiveShell/PassiveGetDownloadFileResponse")]
        System.Threading.Tasks.Task<PassiveClient.ServiceReference1.DownloadRequest> PassiveGetDownloadFileAsync(PassiveClient.ServiceReference1.DownloadRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (PassiveGetUploadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/PassiveGetUploadFile", ReplyAction="http://tempuri.org/IPassiveShell/PassiveGetUploadFileResponse")]
        PassiveClient.ServiceReference1.RemoteFileInfo PassiveGetUploadFile(PassiveClient.ServiceReference1.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/PassiveGetUploadFile", ReplyAction="http://tempuri.org/IPassiveShell/PassiveGetUploadFileResponse")]
        System.Threading.Tasks.Task<PassiveClient.ServiceReference1.RemoteFileInfo> PassiveGetUploadFileAsync(PassiveClient.ServiceReference1.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/PassiveUploadedFile", ReplyAction="http://tempuri.org/IPassiveShell/PassiveUploadedFileResponse")]
        void PassiveUploadedFile(string id, string taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/PassiveUploadedFile", ReplyAction="http://tempuri.org/IPassiveShell/PassiveUploadedFileResponse")]
        System.Threading.Tasks.Task PassiveUploadedFileAsync(string id, string taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/ErrorUploadDownload", ReplyAction="http://tempuri.org/IPassiveShell/ErrorUploadDownloadResponse")]
        void ErrorUploadDownload(string id, string taskId, string response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/ErrorUploadDownload", ReplyAction="http://tempuri.org/IPassiveShell/ErrorUploadDownloadResponse")]
        System.Threading.Tasks.Task ErrorUploadDownloadAsync(string id, string taskId, string response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/Subscribe", ReplyAction="http://tempuri.org/IPassiveShell/SubscribeResponse")]
        bool Subscribe(string id, string version, string nickName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/Subscribe", ReplyAction="http://tempuri.org/IPassiveShell/SubscribeResponse")]
        System.Threading.Tasks.Task<bool> SubscribeAsync(string id, string version, string nickName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/ErrorNextCommand", ReplyAction="http://tempuri.org/IPassiveShell/ErrorNextCommandResponse")]
        void ErrorNextCommand(string id, string taskId, string response);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPassiveShell/ErrorNextCommand", ReplyAction="http://tempuri.org/IPassiveShell/ErrorNextCommandResponse")]
        System.Threading.Tasks.Task ErrorNextCommandAsync(string id, string taskId, string response);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class PassiveDownloadedFileResponse {
        
        public PassiveDownloadedFileResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPassiveShellChannel : PassiveClient.ServiceReference1.IPassiveShell, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PassiveShellClient : System.ServiceModel.ClientBase<PassiveClient.ServiceReference1.IPassiveShell>, PassiveClient.ServiceReference1.IPassiveShell {
        
        public PassiveShellClient() {
        }
        
        public PassiveShellClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PassiveShellClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PassiveShellClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PassiveShellClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsTransferingData() {
            return base.Channel.IsTransferingData();
        }
        
        public System.Threading.Tasks.Task<bool> IsTransferingDataAsync() {
            return base.Channel.IsTransferingDataAsync();
        }
        
        public void StartTransferData() {
            base.Channel.StartTransferData();
        }
        
        public System.Threading.Tasks.Task StartTransferDataAsync() {
            return base.Channel.StartTransferDataAsync();
        }
        
        public bool PassiveClientRun(string id, string taskId, string baseLine) {
            return base.Channel.PassiveClientRun(id, taskId, baseLine);
        }
        
        public System.Threading.Tasks.Task<bool> PassiveClientRunAsync(string id, string taskId, string baseLine) {
            return base.Channel.PassiveClientRunAsync(id, taskId, baseLine);
        }
        
        public System.Tuple<string, string, string> PassiveNextCommand(string id) {
            return base.Channel.PassiveNextCommand(id);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, string, string>> PassiveNextCommandAsync(string id) {
            return base.Channel.PassiveNextCommandAsync(id);
        }
        
        public void CommandResponse(string id, string taskId, string baseLine) {
            base.Channel.CommandResponse(id, taskId, baseLine);
        }
        
        public System.Threading.Tasks.Task CommandResponseAsync(string id, string taskId, string baseLine) {
            return base.Channel.CommandResponseAsync(id, taskId, baseLine);
        }
        
        public bool HasCommand(string id) {
            return base.Channel.HasCommand(id);
        }
        
        public System.Threading.Tasks.Task<bool> HasCommandAsync(string id) {
            return base.Channel.HasCommandAsync(id);
        }
        
        public bool HasUploadCommand(string id) {
            return base.Channel.HasUploadCommand(id);
        }
        
        public System.Threading.Tasks.Task<bool> HasUploadCommandAsync(string id) {
            return base.Channel.HasUploadCommandAsync(id);
        }
        
        public bool HasDownloadCommand(string id) {
            return base.Channel.HasDownloadCommand(id);
        }
        
        public System.Threading.Tasks.Task<bool> HasDownloadCommandAsync(string id) {
            return base.Channel.HasDownloadCommandAsync(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PassiveClient.ServiceReference1.PassiveDownloadedFileResponse PassiveClient.ServiceReference1.IPassiveShell.PassiveDownloadedFile(PassiveClient.ServiceReference1.RemoteFileInfo request) {
            return base.Channel.PassiveDownloadedFile(request);
        }
        
        public void PassiveDownloadedFile(bool FileEnded, string FileName, string FileSize, bool FreshStart, long Length, string PathToSaveOnServer, string id, string taskId, byte[] FileByteStream) {
            PassiveClient.ServiceReference1.RemoteFileInfo inValue = new PassiveClient.ServiceReference1.RemoteFileInfo();
            inValue.FileEnded = FileEnded;
            inValue.FileName = FileName;
            inValue.FileSize = FileSize;
            inValue.FreshStart = FreshStart;
            inValue.Length = Length;
            inValue.PathToSaveOnServer = PathToSaveOnServer;
            inValue.id = id;
            inValue.taskId = taskId;
            inValue.FileByteStream = FileByteStream;
            PassiveClient.ServiceReference1.PassiveDownloadedFileResponse retVal = ((PassiveClient.ServiceReference1.IPassiveShell)(this)).PassiveDownloadedFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<PassiveClient.ServiceReference1.PassiveDownloadedFileResponse> PassiveClient.ServiceReference1.IPassiveShell.PassiveDownloadedFileAsync(PassiveClient.ServiceReference1.RemoteFileInfo request) {
            return base.Channel.PassiveDownloadedFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<PassiveClient.ServiceReference1.PassiveDownloadedFileResponse> PassiveDownloadedFileAsync(bool FileEnded, string FileName, string FileSize, bool FreshStart, long Length, string PathToSaveOnServer, string id, string taskId, byte[] FileByteStream) {
            PassiveClient.ServiceReference1.RemoteFileInfo inValue = new PassiveClient.ServiceReference1.RemoteFileInfo();
            inValue.FileEnded = FileEnded;
            inValue.FileName = FileName;
            inValue.FileSize = FileSize;
            inValue.FreshStart = FreshStart;
            inValue.Length = Length;
            inValue.PathToSaveOnServer = PathToSaveOnServer;
            inValue.id = id;
            inValue.taskId = taskId;
            inValue.FileByteStream = FileByteStream;
            return ((PassiveClient.ServiceReference1.IPassiveShell)(this)).PassiveDownloadedFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PassiveClient.ServiceReference1.DownloadRequest PassiveClient.ServiceReference1.IPassiveShell.PassiveGetDownloadFile(PassiveClient.ServiceReference1.DownloadRequest request) {
            return base.Channel.PassiveGetDownloadFile(request);
        }
        
        public void PassiveGetDownloadFile(ref string FileName, ref bool NewStart, ref string PathInServer, ref string PathToSaveInClient, ref string id, ref string taskId) {
            PassiveClient.ServiceReference1.DownloadRequest inValue = new PassiveClient.ServiceReference1.DownloadRequest();
            inValue.FileName = FileName;
            inValue.NewStart = NewStart;
            inValue.PathInServer = PathInServer;
            inValue.PathToSaveInClient = PathToSaveInClient;
            inValue.id = id;
            inValue.taskId = taskId;
            PassiveClient.ServiceReference1.DownloadRequest retVal = ((PassiveClient.ServiceReference1.IPassiveShell)(this)).PassiveGetDownloadFile(inValue);
            FileName = retVal.FileName;
            NewStart = retVal.NewStart;
            PathInServer = retVal.PathInServer;
            PathToSaveInClient = retVal.PathToSaveInClient;
            id = retVal.id;
            taskId = retVal.taskId;
        }
        
        public System.Threading.Tasks.Task<PassiveClient.ServiceReference1.DownloadRequest> PassiveGetDownloadFileAsync(PassiveClient.ServiceReference1.DownloadRequest request) {
            return base.Channel.PassiveGetDownloadFileAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PassiveClient.ServiceReference1.RemoteFileInfo PassiveClient.ServiceReference1.IPassiveShell.PassiveGetUploadFile(PassiveClient.ServiceReference1.DownloadRequest request) {
            return base.Channel.PassiveGetUploadFile(request);
        }
        
        public bool PassiveGetUploadFile(ref string FileName, bool NewStart, string PathInServer, string PathToSaveInClient, ref string id, ref string taskId, out string FileSize, out bool FreshStart, out long Length, out string PathToSaveOnServer, out byte[] FileByteStream) {
            PassiveClient.ServiceReference1.DownloadRequest inValue = new PassiveClient.ServiceReference1.DownloadRequest();
            inValue.FileName = FileName;
            inValue.NewStart = NewStart;
            inValue.PathInServer = PathInServer;
            inValue.PathToSaveInClient = PathToSaveInClient;
            inValue.id = id;
            inValue.taskId = taskId;
            PassiveClient.ServiceReference1.RemoteFileInfo retVal = ((PassiveClient.ServiceReference1.IPassiveShell)(this)).PassiveGetUploadFile(inValue);
            FileName = retVal.FileName;
            FileSize = retVal.FileSize;
            FreshStart = retVal.FreshStart;
            Length = retVal.Length;
            PathToSaveOnServer = retVal.PathToSaveOnServer;
            id = retVal.id;
            taskId = retVal.taskId;
            FileByteStream = retVal.FileByteStream;
            return retVal.FileEnded;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<PassiveClient.ServiceReference1.RemoteFileInfo> PassiveClient.ServiceReference1.IPassiveShell.PassiveGetUploadFileAsync(PassiveClient.ServiceReference1.DownloadRequest request) {
            return base.Channel.PassiveGetUploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<PassiveClient.ServiceReference1.RemoteFileInfo> PassiveGetUploadFileAsync(string FileName, bool NewStart, string PathInServer, string PathToSaveInClient, string id, string taskId) {
            PassiveClient.ServiceReference1.DownloadRequest inValue = new PassiveClient.ServiceReference1.DownloadRequest();
            inValue.FileName = FileName;
            inValue.NewStart = NewStart;
            inValue.PathInServer = PathInServer;
            inValue.PathToSaveInClient = PathToSaveInClient;
            inValue.id = id;
            inValue.taskId = taskId;
            return ((PassiveClient.ServiceReference1.IPassiveShell)(this)).PassiveGetUploadFileAsync(inValue);
        }
        
        public void PassiveUploadedFile(string id, string taskId) {
            base.Channel.PassiveUploadedFile(id, taskId);
        }
        
        public System.Threading.Tasks.Task PassiveUploadedFileAsync(string id, string taskId) {
            return base.Channel.PassiveUploadedFileAsync(id, taskId);
        }
        
        public void ErrorUploadDownload(string id, string taskId, string response) {
            base.Channel.ErrorUploadDownload(id, taskId, response);
        }
        
        public System.Threading.Tasks.Task ErrorUploadDownloadAsync(string id, string taskId, string response) {
            return base.Channel.ErrorUploadDownloadAsync(id, taskId, response);
        }
        
        public bool Subscribe(string id, string version, string nickName) {
            return base.Channel.Subscribe(id, version, nickName);
        }
        
        public System.Threading.Tasks.Task<bool> SubscribeAsync(string id, string version, string nickName) {
            return base.Channel.SubscribeAsync(id, version, nickName);
        }
        
        public void ErrorNextCommand(string id, string taskId, string response) {
            base.Channel.ErrorNextCommand(id, taskId, response);
        }
        
        public System.Threading.Tasks.Task ErrorNextCommandAsync(string id, string taskId, string response) {
            return base.Channel.ErrorNextCommandAsync(id, taskId, response);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAletCallBack", CallbackContract=typeof(PassiveClient.ServiceReference1.IAletCallBackCallback))]
    public interface IAletCallBack {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAletCallBack/RegisterCallBackFunction")]
        void RegisterCallBackFunction(string id, string type);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAletCallBack/RegisterCallBackFunction")]
        System.Threading.Tasks.Task RegisterCallBackFunctionAsync(string id, string type);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAletCallBack/KeepCallBackAlive")]
        void KeepCallBackAlive(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAletCallBack/KeepCallBackAlive")]
        System.Threading.Tasks.Task KeepCallBackAliveAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAletCallBackCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAletCallBack/CallBackFunction")]
        void CallBackFunction(string str);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAletCallBack/KeepCallbackALive")]
        void KeepCallbackALive();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAletCallBackChannel : PassiveClient.ServiceReference1.IAletCallBack, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AletCallBackClient : System.ServiceModel.DuplexClientBase<PassiveClient.ServiceReference1.IAletCallBack>, PassiveClient.ServiceReference1.IAletCallBack {
        
        public AletCallBackClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AletCallBackClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AletCallBackClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AletCallBackClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AletCallBackClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterCallBackFunction(string id, string type) {
            base.Channel.RegisterCallBackFunction(id, type);
        }
        
        public System.Threading.Tasks.Task RegisterCallBackFunctionAsync(string id, string type) {
            return base.Channel.RegisterCallBackFunctionAsync(id, type);
        }
        
        public void KeepCallBackAlive(string id) {
            base.Channel.KeepCallBackAlive(id);
        }
        
        public System.Threading.Tasks.Task KeepCallBackAliveAsync(string id) {
            return base.Channel.KeepCallBackAliveAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRestService")]
    public interface IRestService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/RestGetStatus", ReplyAction="http://tempuri.org/IRestService/RestGetStatusResponse")]
        System.IO.Stream RestGetStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRestService/RestGetStatus", ReplyAction="http://tempuri.org/IRestService/RestGetStatusResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> RestGetStatusAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRestServiceChannel : PassiveClient.ServiceReference1.IRestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RestServiceClient : System.ServiceModel.ClientBase<PassiveClient.ServiceReference1.IRestService>, PassiveClient.ServiceReference1.IRestService {
        
        public RestServiceClient() {
        }
        
        public RestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.IO.Stream RestGetStatus() {
            return base.Channel.RestGetStatus();
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> RestGetStatusAsync() {
            return base.Channel.RestGetStatusAsync();
        }
    }
}
